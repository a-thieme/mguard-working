general
{
    network /ndn/
    site /uiuc-site
    router /%C1.Router/cs/uiuc
    lsa-refresh-time 1800
    lsa-interest-lifetime 4
    sync-protocol psync
    sync-interest-lifetime 60000
    state-dir /tmp/minindn/uiuc/log
}
neighbors
{
    hello-retries 3
    hello-timeout 1
    hello-interval 60
    adj-lsa-build-interval 10
    face-dataset-fetch-tries 3
    face-dataset-fetch-interval 3600
    neighbor
    {
        name /ndn/e-site/%C1.Router/cs/e
        face-uri udp://10.0.1.13
        link-cost 5
    }
    neighbor
    {
        name /ndn/csu-site/%C1.Router/cs/csu
        face-uri udp://10.0.0.238
        link-cost 14
    }
    neighbor
    {
        name /ndn/c-site/%C1.Router/cs/c
        face-uri udp://10.0.0.166
        link-cost 9
    }
    neighbor
    {
        name /ndn/padua-site/%C1.Router/cs/padua
        face-uri udp://10.0.1.90
        link-cost 80
    }
}
hyperbolic
{
    state off
    radius 29.2553
    angle 2.98231
}
fib
{
    max-faces-per-prefix 3
    routing-calc-interval 15
}
advertising
{
    prefix /ndn/uiuc-site/uiuc
}
security
{
    validator
    {
        rule
        {
            id "NLSR Hello Rule"
            for data
            filter
            {
                type name
                regex ^[^<nlsr><INFO>]*<nlsr><INFO><><>$
            }
            checker
            {
                type customized
                sig-type ecdsa-sha256
                key-locator
                {
                    type name
                    hyper-relation
                    {
                        k-regex "^([^<KEY><nlsr>]*)<nlsr><KEY><>{1,3}$"
                        k-expand \\1
                        h-relation equal
                        p-regex ^([^<nlsr><INFO>]*)<nlsr><INFO><><>$
                        p-expand \\1
                    }
                }
            }
        }
        rule
        {
            id "NLSR LSA Rule"
            for data
            filter
            {
                type name
                regex ^[^<nlsr><LSA>]*<nlsr><LSA>
            }
            checker
            {
                type customized
                sig-type ecdsa-sha256
                key-locator
                {
                    type name
                    hyper-relation
                    {
                        k-regex "^([^<KEY><nlsr>]*)<nlsr><KEY><>{1,3}$"
                        k-expand \\1
                        h-relation equal
                        p-regex ^<localhop>([^<nlsr><LSA>]*)<nlsr><LSA>(<>*)<><><><>$
                        p-expand \\1\\2
                    }
                }
            }
        }
        rule
        {
            id "NLSR datasets"
            for data
            filter
            {
                type name
                regex ^[^<nlsr>]*<nlsr>[<lsdb><routing-table>]
            }
            checker
            {
                type customized
                sig-type ecdsa-sha256
                key-locator
                {
                    type name
                    hyper-relation
                    {
                        k-regex "^([^<KEY>]*)<KEY><>{1,3}$"
                        k-expand \\1
                        h-relation equal
                        p-regex ^([^<nlsr>]*)<nlsr>[<lsdb><routing-table>]
                        p-expand \\1
                    }
                }
            }
        }
        rule
        {
            id "NLSR Hierarchy Exception Rule"
            for data
            filter
            {
                type name
                regex ^[^<KEY><%C1.Router>]*<%C1.Router>[^<KEY><nlsr>]*<KEY><><><>$
            }
            checker
            {
                type customized
                sig-type ecdsa-sha256
                key-locator
                {
                    type name
                    hyper-relation
                    {
                        k-regex "^([^<KEY><%C1.Operator>]*)<%C1.Operator>[^<KEY>]*<KEY><>{1,3}$"
                        k-expand \\1
                        h-relation equal
                        p-regex ^([^<KEY><%C1.Router>]*)<%C1.Router>[^<KEY>]*<KEY><><><>$
                        p-expand \\1
                    }
                }
            }
        }
        rule
        {
            id "NLSR Hierarchical Rule"
            for data
            filter
            {
                type name
                regex ^[^<KEY>]*<KEY><><><>$
            }
            checker
            {
                type hierarchical
                sig-type ecdsa-sha256
            }
        }
        trust-anchor
        {
            type any
        }
    }
    prefix-update-validator
    {
        rule
        {
            id "NLSR ControlCommand Rule"
            for interest
            filter
            {
                type name
                regex ^<localhost><nlsr><prefix-update>[<advertise><withdraw>]<><><>$
            }
            checker
            {
                type customized
                sig-type ecdsa-sha256
                key-locator
                {
                    type name
                    regex "^([^<KEY><%C1.Operator>]*)<%C1.Operator>[^<KEY>]*<KEY><>{1,3}$"
                }
            }
        }
        rule
        {
            id "NLSR Hierarchy Rule"
            for data
            filter
            {
                type name
                regex ^[^<KEY>]*<KEY><><><>$
            }
            checker
            {
                type hierarchical
                sig-type ecdsa-sha256
            }
        }
        trust-anchor
        {
            type any
        }
    }
}
